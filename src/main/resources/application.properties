
# GSON
# 序列化日期对象时使用的格式。
#spring.gson.date-format=

# 是否禁用HTML字符转义，如“<”、“>”等。
#spring.gson.disable-html-escaping=

# 是否在序列化期间排除内部类。
#spring.gson.disable-inner-class-serialization=

# 是否启用复杂映射键（即非原语）的序列化。
#spring.gson.enable-complex-map-key-serialization=

# 是否排除所有没有“expose”注释的字段进行序列化或反序列化。
#spring.gson.exclude-fields-without-expose-annotation=

# 在序列化和反序列化期间应用于对象字段的命名策略。
#spring.gson.field-naming-policy=

# 是否通过在输出前添加一些特殊文本来生成不可执行的JSON。
#spring.gson.generate-non-executable-json=

# 对于解析不符合RFC 4627的JSON是否宽容。
#spring.gson.lenient=

# 长类型和长类型的序列化策略。
#spring.gson.long-serialization-policy=

# 是否输出适合漂亮打印页面的序列化JSON。
#spring.gson.pretty-printing=

# 是否序列化空字段。
spring.gson.serialize-nulls=true

#数据库连接
# 地址内应该为// 而不是 :
#
spring.datasource.url = jdbc:mysql://localhost:3306/test?characterEncoding=utf8&allowMultiQueries=true&useSSL=false
spring.datasource.username = root
spring.datasource.password = 123456
spring.datasource.driver-class-name = com.mysql.jdbc.Driver
#
#spring.datasource.url = jdbc:oracle:thin:@172.26.150.250:1522:orazc
#spring.datasource.username = WX_DD
#spring.datasource.password = wxdd123
# oracle.jdbc.driver.OracleDriver
#spring.datasource.driver-class-name = oracle.jdbc.OracleDriver
#
#spring.datasource.url = jdbc:oracle:thin:@127.0.0.1:1521:XE
#spring.datasource.username = WX_DD
#spring.datasource.password = 123
# oracle.jdbc.driver.OracleDriver
#spring.datasource.driver-class-name = oracle.jdbc.OracleDriver


#告知springboot 使用的链接池类型是druid
spring.datasource.type = com.alibaba.druid.pool.DruidDataSource
#初始化连接大小
spring.datasource.druid.initial-size=30
#连接最小空闲
spring.datasource.druid.min-idle=30
#设置连接池最大连接数
spring.datasource.druid.max-active=300
#配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=300000
#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.druid.test-while-idle=true
#申请连接时执行validationQuery检测连接是否有效，[做了这个配置会降低性能]。default：true （经过测试效率为10倍左右，如果网速慢容易出现连接失败-yjn）
spring.datasource.druid.test-on-borrow=false
#归还连接时执行validationQuery检测连接是否有效，[做了这个配置会降低性能]
spring.datasource.druid.test-on-return=false
#打开removeAbandoned功能（放置连接泄露）
spring.datasource.druid.remove-abandoned=true
#300秒，也就是5分钟 , 避免无法及时回收
spring.datasource.druid.remove-abandoned-timeout=300
# 关闭abanded连接时输出错误日志
spring.datasource.druid.log-abandoned=true
#这里配置提交方式，默认就是TRUE，可以不用配置
spring.datasource.druid.default-auto-commit=true
#打开PSCache，并且指定每个连接上PSCache的大小
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。default：false
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=100
#filters
#spring.datasource.druid.filters=stat,slf4j

#mybatis.mapperLocations = classpath:mapper/**/*.xml

###mybatis-plus配置
#MyBatis 配置文件位置
mybatis-plus.config-location=classpath:mybatis-config.xml
#Maven 多模块项目的扫描路径需以 classpath*: 开头 （即加载多个 jar 包下的 XML 文件）
mybatis-plus.mapper-locations=classpath*:mybatis/*.xml
#启动时是否检查 MyBatis XML 文件的存在，默认不检查。
mybatis-plus.check-config-location=false
#指定 MyBatis 的执行器，MyBatis 的执行器
#MyBatis 的执行器总共有三种：
#ExecutorType.SIMPLE：该执行器类型不做特殊的事情，为每个语句的执行创建一个新的预处理语句（PreparedStatement）
#ExecutorType.REUSE：该执行器类型会复用预处理语句（PreparedStatement）
#ExecutorType.BATCH：该执行器类型会批量执行所有的更新语句
mybatis-plus.executor-type=simple
#是否开启自动驼峰命名规则（camel case）映射
mybatis-plus.configuration.map-underscore-to-camel-case=true
###全局策略配置
#Mapper 对应的 XML 文件会自动刷新，更改 XML 文件后，无需再次重启工程,生产环境无需打开
mybatis-plus.global-config.refresh=true
#是否缓存 Sql 解析，默认不缓存。
mybatis-plus.global-config.sql-parser-cache=true
#表名前缀
mybatis-plus.global-config.db-config.table-prefix=T_

#
spring.mvc.view.prefix=classpath:/static/
spring.mvc.view.suffix=.html

#log 日志
#使用配置文件配置日志输出
logging.config= classpath:log4j2.xml
#logging.file=E:/log/eomer/log.log
#logging.level.root=INFO
#logging.level.com.example.demo.mapper=INFO
## 控制台日志输出级别
#logging.level.org.springframework.web=INFO


# 访问端口设置
#server.port = 0
#server.port = 8020
server.port = 8080
#server.port = 7281

